#!/usr/bin/env python3

import matplotlib.pyplot as plt
import numpy as np
import wave

file = 'overkill-the-years-of-decay.wav'

def splitpoints(channels):
	threshold = 10
	possible_splitpoints = []
	splitpoints = []

	print(len(channels), " channels.")
	for i, c in enumerate(channels):
		print(len(c), "samples in channel ", i)

	# just analyzing channel 0
	analyze = channels[0]

	# get all points where threshold is reached
	for i in range(threshold, len(analyze)):
		level_null = True
		for j in range(i, i - threshold, -1):
			if analyze[j] != 0:
				level_null = False
				break

		if level_null == True:
			possible_splitpoints.append(i)
	
	possible_splitpoints.append(len(analyze) - 1)
	
	# sort out pauses longer than threshold
	mem = 0
	for i in range(len(possible_splitpoints) - 1, 0, -1):
		# pause longer than threshold
		if possible_splitpoints[i] == mem - 1:
			mem = mem - 1
		# new splitpoint
		else:
			splitpoints.append(possible_splitpoints[i])
			mem = possible_splitpoints[i]

	return splitpoints


with wave.open(file,'r') as wav_file:
	#Extract Raw Audio from Wav File
	signal = wav_file.readframes(-1)
	signal = np.fromstring(signal, 'Int16')

	params = wav_file.getparams()

	#Split the data into channels 
	channels = [[] for channel in range(wav_file.getnchannels())]

	#Reduce framerate
	step = int(wav_file.getframerate() / 10 * len(channels))

	for i in range(len(channels)):
		for j in range(i, len(signal), step):
			channels[j%len(channels)].append(signal[j])

	sp = sorted(splitpoints(channels))
	mem = 0
	for i in range(len(sp)):
		name = str(i) + " - " + file
		sp[i] = sp[i] * step
		print(name, 'from ', mem, ' to ', sp[i])
		with wave.open(name, 'w') as o:
			o.setparams(params)

			#expand framerate
			nframes = sp[i] - mem
			o.setnframes(nframes)

			o.writeframes(signal[mem:sp[i]].tostring())
		mem = sp[i]